"use client"
import Head from "next/head";
import Image from "next/image";
import '../styles/suitWallet.css';
import styles from "../styles/Home.module.css";
import '@suiet/wallet-kit/style.css';

import { motion, AnimatePresence } from "framer-motion"
import React, { useState } from "react";
import { Button } from "@/components/ui/button"


import {
  ConnectButton as SuietConnectButton,
  useAccountBalance,
  useWallet,
  SuiChainId,
  ErrorCode,
} from "@suiet/wallet-kit"

import {
  AllDefaultWallets,
  defineStashedWallet,
  WalletProvider,
} from "@suiet/wallet-kit";
import App from "../../components/App.js";
import '../styles/suitWallet.css';
import '@suiet/wallet-kit/style.css';
//import '../components/App.css';



const sampleNft = new Map([
  ["sui:devnet", "0xe146dbd6d33d7227700328a9421c58ed34546f998acdc42a1d05b4818b49faa2::nft::mint"],
  ["sui:testnet", "0x5ea6aafe995ce6506f07335a40942024106a57f6311cb341239abf2c3ac7b82f::nft::mint"],
  ["sui:mainnet", "0x5b45da03d42b064f5e051741b6fed3b29eb817c7923b83b92f37a1d2abf4fbab::nft::mint"],
])

// Custom styled connect button that wraps the Suiet ConnectButton
const ConnectButton = ({ onConnectError }) => {
  return (
    <div className="relative z-10">
      <div className="absolute -inset-1 bg-gradient-to-r from-purple-600 to-blue-500 rounded-lg blur opacity-75 group-hover:opacity-100 transition duration-200"></div>
      <div className="relative">
        <SuietConnectButton
          onConnectError={onConnectError}
          className="!bg-gradient-to-r !from-purple-600 !to-blue-500 !text-white !font-bold !py-3 !px-8 !rounded-lg !shadow-glow !border-none !transition-all !duration-300 hover:!shadow-[0_0_20px_rgba(139,92,246,0.7)]"
        />
      </div>
    </div>
  )
}


// function App({ Component, pageProps }) {
//   return <Component {...pageProps} />;
// }
export default function Home() {
  const wallet = useWallet();
  const [accounts, setAccounts] = React.useState(null);
  const [txHash, setTxHash] = React.useState(null);
  const [isWalletConnected, setIsWalletConnected] = useState(false);
  const CHAIN_NAME = 'sui';


  const [showDetails, setShowDetails] = useState(false)
  const [actionStatus, setActionStatus] = useState(null)

    // const wallet = useWalletStore((state)=>state.wallet);

    async function handleSignMsg() {
      if (!wallet.account) return
  
      setActionStatus({ type: "loading", message: "Signing message..." })
  
      try {
        const msg = "Hello Sui Battlefield!"
        const msgBytes = new TextEncoder().encode(msg)
        const result = await wallet.signPersonalMessage({
          message: msgBytes,
        })
        const verifyResult = await wallet.verifySignedMessage(result, wallet.account.publicKey)
        console.log("verify signedMessage", verifyResult)
  
        if (!verifyResult) {
          setActionStatus({ type: "warning", message: "Signature verification failed" })
        } else {
          setActionStatus({ type: "success", message: "Message signed and verified!" })
        }
        setTimeout(() => setActionStatus(null), 3000)
      } catch (e) {
        console.error("signMessage failed", e)
        setActionStatus({ type: "error", message: "Failed to sign message" })
        setTimeout(() => setActionStatus(null), 3000)
      }
    }

    const truncateAddress = (address) => {
      if (!address) return ""
      return `${address.slice(0, 6)}...${address.slice(-4)}`
    }
  
  

  const handleConnectWallet = () => {

    setIsWalletConnected(true)

    console.log("yeh sui ka waalet ; ",wallet);
    handleSignMsg();
  }
    const chainName = (chainId) => {
      switch (chainId) {
        case SuiChainId.MAIN_NET:
          return "Mainnet"
        case SuiChainId.TEST_NET:
          return "Testnet"
        case SuiChainId.DEV_NET:
          return "Devnet"
        default:
          return "Unknown"
      }
    }







  return (
    <WalletProvider
      defaultWallets={[
        ...AllDefaultWallets,
        defineStashedWallet({
          appName: "Suiet Kit Playground",
        }),
      ]}
    >
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        
        <WalletProvider
                      defaultWallets={[
                        ...AllDefaultWallets,
                        defineStashedWallet({
                          appName: "Suiet Kit Playground",
                        }),
                      ]}
                    >
                      
                    <div className="flex flex-col items-center justify-center py-6">
                              <ConnectButton
                                onConnectError={(error) => {
                                  if (error.code === ErrorCode.WALLET__CONNECT_ERROR__USER_REJECTED) {
                                    console.warn("user rejected the connection to " + error.details?.wallet)
                                    setActionStatus({ type: "warning", message: "Connection rejected" })
                                    setTimeout(() => setActionStatus(null), 3000)
                                  } else {
                                    console.warn("unknown connect error: ", error)
                                    setActionStatus({ type: "error", message: "Connection failed" })
                                    setTimeout(() => setActionStatus(null), 3000)
                                  }
                                }}
                                />

                          
                          {!wallet.connected ? (
                            <motion.p
                              initial={{ opacity: 0 }}
                              animate={{ opacity: 1 }}
                              transition={{ delay: 0.3 }}
                              className="mt-6 text-gray-400 text-center"
                            >
                              Connect your wallet to access gaming features and rewards
                            </motion.p>
                          ) : (
                            <motion.div
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ duration: 0.5 }}
                              className="w-full mt-6"
                            >
                              <div className="flex flex-col sm:flex-row items-center justify-between bg-gray-800/50 rounded-lg p-4 mb-4">
                                <div className="flex items-center mb-4 sm:mb-0">
                                  <div className="w-10 h-10 bg-gradient-to-r from-purple-600 to-blue-500 rounded-full flex items-center justify-center mr-3">
                                    <Wallet className="h-5 w-5 text-white" />
                                  </div>
                                  <div>
                                    <p className="font-medium text-white">{wallet.adapter?.name}</p>
                                    <p className="text-sm text-gray-400">{truncateAddress(wallet.account?.address)}</p>
                                  </div>
                                </div>
                                <div className="flex items-center bg-gray-900 rounded-lg px-4 py-2">
                                  <CreditCard className="h-4 w-4 text-purple-400 mr-2" />
                                  
                                </div>
                              </div>

                              <div className="flex justify-between items-center mb-2">
                                <p className="text-sm text-gray-400">
                                  Network: <span className="text-white">{chainName(wallet.chain?.id)}</span>
                                </p>
                                <button
                                  onClick={() => setShowDetails(!showDetails)}
                                  className="flex items-center text-sm text-purple-400 hover:text-purple-300"
                                >
                                  {showDetails ? (
                                    <>
                                      Hide Details <ChevronUp className="ml-1 h-4 w-4" />
                                    </>
                                  ) : (
                                    <>
                                      Show Details <ChevronDown className="ml-1 h-4 w-4" />
                                    </>
                                  )}
                                </button>
                              </div>

                              <AnimatePresence>
                                {showDetails && (
                                  <motion.div
                                    initial={{ height: 0, opacity: 0 }}
                                    animate={{ height: "auto", opacity: 1 }}
                                    exit={{ height: 0, opacity: 0 }}
                                    transition={{ duration: 0.3 }}
                                    className="overflow-hidden"
                                  >
                                    <div className="bg-gray-800/30 rounded-lg p-4 mb-4 text-sm">
                                      <p className="mb-2">
                                        <span className="text-gray-400">Address: </span>
                                        <span className="text-white break-all">{wallet.account?.address}</span>
                                      </p>
                                      <p className="mb-2">
                                        <span className="text-gray-400">Public Key: </span>
                                        <span className="text-white break-all">{uint8arrayToHex(wallet.account?.publicKey)}</span>
                                      </p>
                                      <p>
                                        <span className="text-gray-400">Status: </span>
                                        <span className="text-green-400">
                                          {wallet.connecting ? "Connecting" : wallet.connected ? "Connected" : "Disconnected"}
                                        </span>
                                      </p>
                                    </div>
                                  </motion.div>
                                )}
                              </AnimatePresence>

                              <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 mt-6">
                                {nftContractAddr && (
                                  <Button
                                    variant="gaming"
                                    onClick={() => handleExecuteMoveCall(nftContractAddr)}
                                    className="flex items-center justify-center"
                                  >
                                    <Award className="mr-2 h-4 w-4" />
                                    Mint Gaming NFT
                                  </Button>
                                )}
                                <Button variant="neon" onClick={handleSignMsg} className="flex items-center justify-center">
                                  <Shield className="mr-2 h-4 w-4" />
                                  Sign Message
                                </Button>
                                {nftContractAddr && (
                                  <Button
                                    variant="default"
                                    onClick={() => handleSignTxnAndVerifySignature(nftContractAddr)}
                                    className="flex items-center justify-center"
                                  >
                                    <Shield className="mr-2 h-4 w-4" />
                                    Sign & Verify Txn
                                  </Button>
                                )}
                              </div>
                            </motion.div>
                          )}
                   </div>
                    
                    
                    </WalletProvider> 
                    



      </div>
    </WalletProvider>
  );
}
